install.packages("dplyr")
install.packages("tidyr")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidyverser")
install.packages("tidyverse")
install.packages("modeltime")
install.packages("tidyverser")
install.packages("tidyverse")
getwd()
setdw("~/Documents/oms_mapa")
setwd("~/Documents/oms_mapa")
setwd("/~/Documents/oms_mapa")
setwd("/home/gabriel/Documents/oms_mapa")
setwd("/home/cownvin/Documents/oms_mapa")
setwd("/home/cownvin/Documents/osm_mapa")
install.packages("flexdashboard")
install.packages("fontawesome")
install.packages("leaflet.extras")
install.packages("reactable")
install.packages("mapview")
install.packages("stringr")
install.packages("stringr")
install.packages("leaflet")
setwd("/home/cowvin/Documents/osm_mapa")
setwd("/home/cownvin/Documents/osm_mapa")
install.packages("argparse")
library(argparse)
install.packages("modeltime")
install.packages("modeltime")
install.packages("lmtest")
install.packages("lmtest")
install.packages("modeltime")
install.packages("modeltime")
install.packages("modeltime")
install.packages("matrixStats")
install.packages("loo")
Sys.setenv(DOWNLOAD_STATIC_LIBV8=1)
install.packages("V8")
install.packages("rstan")
install.packages("rstan")
install.packages("Rcpp", dependencies = TRUE, INSTALL_opts = '--no-lock')
install.packages("rstan")
install.packages("modeltime", dependencies = TRUE)
library(trelliscopejs)
library(modeltime)
install.packages("modeltime")
install.packages("modeltime")
install.packages("rhino")
install.packages("golem")
install.packages("shiny")
install.packages("rhino")
getwd()
setwd("/home/cownvin/Documents/model_mercado_financeiro")
library(tidyverse)
library(tidyverse)
library(modeltime)
library(timetk)
library(tidymodels)
library(dplyr)
library(readxl)
dados <- read_xlsx("WDOLFUT-DIARIO-02_01_2018_a_03-05-2023.xlsx")
dados <- read_xlsx("WDOLFUT-DIARIO-02_01_2018_a_03-05-2023.xlsx")
df <- dados |>
arrange(Data) |>
future_frame(.date_var = Data, .length_out = 1, .bind_data = TRUE)
df |> plot_time_series(Data, Minima)
splits <- time_series_split(
data = df,
date_var = Data,
assess = "1.9 year",
cumulative = TRUE
)
splits |>
tk_time_series_cv_plan() |>
plot_time_series_cv_plan(Data, Minima)
treino <- training(splits)
teste <- testing(splits)
model_arima <- arima_reg() |>
set_engine("auto_arima") |>
fit(Minima ~ Data, treino)
model_arima <- arima_reg() |>
set_engine("auto_arima") |>
fit(Minima ~ Data, treino)
model_prophet <- prophet_reg(
seasonality_yearly = TRUE
) |>
set_engine("prophet") |>
fit(Minima ~ Data, treino)
model_glmnet <- linear_reg(penalty = 0.01) |>
set_engine("glmnet") |>
fit(
Minima ~ wday(Data, label = TRUE)
+ month(Data, label = TRUE)
+ as.numeric(Data),
treino
)
model_tbl <- modeltime_table(
model_arima,
model_prophet,
model_glmnet
)
calib_tbl <- model_tbl |>
modeltime_calibrate(teste)
calib_tbl <- model_tbl |>
modeltime_calibrate(teste)
calib_tbl |> modeltime_accuracy()
calib_tbl |>
modeltime_forecast(
new_data = teste,
actual_data = df
) |>
plot_modeltime_forecast()
future_forecast_tbl <- calib_tbl |>
modeltime_refit(df) |>
modeltime_forecast(
h = "1.9 year",
actual_data = df
)
future_forecast_tbl |>
plot_modeltime_forecast()
model_prophet <- prophet_reg(
seasonality_yearly = TRUE
) |>
set_engine("prophet") |>
fit(Minima ~ ., treino)
model_prophet
df <- dados |>
arrange(Data) |>
future_frame(.date_var = Data, .length_out = 1, .bind_data = TRUE)
df |> plot_time_series(Data, Minima)
splits <- time_series_split(
data = df,
date_var = Data,
assess = "1.9 year",
cumulative = TRUE
)
splits <- time_series_split(
data = df,
date_var = Data,
assess = "1.9 year",
cumulative = TRUE
)
splits |>
tk_time_series_cv_plan() |>
plot_time_series_cv_plan(Data, Minima)
splits |>
tk_time_series_cv_plan() |>
plot_time_series_cv_plan(Data, Minima)
treino <- training(splits)
treino <- training(splits)
teste <- testing(splits)
model_arima <- arima_reg() |>
set_engine("auto_arima") |>
fit(Minima ~ ., treino)
model_arima <- arima_reg() |>
set_engine("auto_arima") |>
fit(Minima ~ ., treino)
model_prophet <- prophet_reg(
seasonality_yearly = TRUE
) |>
set_engine("prophet") |>
fit(Minima ~ ., treino)
model_glmnet <- linear_reg(penalty = 0.01) |>
set_engine("glmnet") |>
fit(
Minima ~ wday(Data, label = TRUE)
+ month(Data, label = TRUE)
+ as.numeric(Data),
treino
)
model_tbl <- modeltime_table(
model_arima,
model_prophet,
model_glmnet
)
calib_tbl <- model_tbl |>
modeltime_calibrate(teste)
calib_tbl |> modeltime_accuracy()
calib_tbl |>
modeltime_forecast(
new_data = teste,
actual_data = df
) |>
plot_modeltime_forecast()
calib_tbl |>
modeltime_forecast(
new_data = teste,
actual_data = df
) |>
plot_modeltime_forecast()
model_tbl
future_forecast_tbl <- calib_tbl |>
modeltime_refit(df) |>
modeltime_forecast(
h = "1.9 year",
actual_data = df
)
future_forecast_tbl |>
plot_modeltime_forecast()
dados
dados |> is.na()
dados |> is.na() |> sum()
colSums(is.na(df))
colSums(is.na(df)) |> as.data.frame()
rowSums(is.na(df))
