9.00,9.75,10.65,13.20,7.95,12.50,7.95,9.15,9.75,9.00)
Banco2 <- tibble(
Idade = idade,
Comprimento = comprimento
)
Banco2 |> head() |> kable()
Banco2 |>
ggplot() +
geom_point(aes(x = Idade, y = Comprimento))
cor(Banco2$Idade, Banco2$Comprimento)
salario <- c(19307,31769,22769,31307,27769,30923,26538,22230,28538,32307,28230,19076,
25384,25692,42230,40923,36000,47076,31461,29923,47461,41153,23615,40923,
45076,29076,44846)
experiencia <- c(0, 17, 8, 15, 9, 15, 8, 5, 13, 20, 11, 1, 6, 7, 23, 20, 18, 27,
11, 10, 29, 23, 4, 22, 25, 9, 25)
Banco3 <- tibble(
Salario = salario,
Experiencia = experiencia
)
Banco3 |> head() |> kable()
Banco3 |>
ggplot() +
geom_point(aes(x = Salario, y = Experiencia))
cor(Banco3$Salario, Banco3$Experiencia)
knitr::opts_chunk$set(echo = TRUE)
cor.test(Banco1$Idade, Banco1$`Massa Muscular`, method = "pearson", alternative="two.sided")
cor.test(Banco1$Idade, Banco1$`Massa Muscular`, method = "pearson", alternative="less")
cor.test(Banco1$Idade, Banco1$`Massa Muscular`, method = "pearson", alternative="great")
cor.test(Banco2$Idade, Banco2$Comprimento, method = "pearson", alternative="great")
cor.test(Banco3$Salario, Banco3$Experiencia, method = "pearson", alternative="two.sided")
cor.test(Banco3$Salario, Banco3$Experiencia, method = "pearson", alternative="less")
cor.test(Banco3$Salario, Banco3$Experiencia, method = "pearson", alternative="great")
idade<-c(71, 64, 43, 67, 56, 73, 68, 56, 76, 65, 45, 58, 45, 53, 49, 78, 73, 68)
massamuscular<-c(82, 91, 100, 68, 87, 73, 78, 80, 65, 84, 116, 76, 97, 100, 105, 77, 73, 78)
idade<-c(40, 42, 42, 47, 49, 50, 54, 56, 56, 57, 57, 58, 61, 62, 62, 65, 65, 65, 66,
66, 66, 67, 68, 68, 68, 69, 69, 70, 71, 71, 71, 72, 73, 74, 74, 75, 75, 75,
75, 76, 77, 80, 82, 82, 82, 83, 85, 86, 88, 88, 94)
comprimento<-c(9.00,9.60,9.75,11.25,9.45,11.25,9.00,7.95,12.00,8.10,10.20,8.55,7.20,
7.95,8.85,8.25,8.85,9.75,8.85,9.15,10.20, 9.15,7.95,8.85,9.00,7.80,10.05,
10.50,9.15,9.45,9.45,9.45,8.10,8.85,9.60,6.45,9.75,10.20,12.00, 6.00,8.85,
9.00,9.75,10.65,13.20,7.95,12.50,7.95,9.15,9.75,9.00)
Banco1 <- tibble(
Idade = idade,
`Massa Muscular` = massamuscular
)
idade<-c(71, 64, 43, 67, 56, 73, 68, 56, 76, 65, 45, 58, 45, 53, 49, 78, 73, 68)
massamuscular<-c(82, 91, 100, 68, 87, 73, 78, 80, 65, 84, 116, 76, 97, 100, 105, 77, 73, 78)
Banco1 <- tibble(
Idade = idade,
`Massa Muscular` = massamuscular
)
idade<-c(40, 42, 42, 47, 49, 50, 54, 56, 56, 57, 57, 58, 61, 62, 62, 65, 65, 65, 66,
66, 66, 67, 68, 68, 68, 69, 69, 70, 71, 71, 71, 72, 73, 74, 74, 75, 75, 75,
75, 76, 77, 80, 82, 82, 82, 83, 85, 86, 88, 88, 94)
comprimento<-c(9.00,9.60,9.75,11.25,9.45,11.25,9.00,7.95,12.00,8.10,10.20,8.55,7.20,
7.95,8.85,8.25,8.85,9.75,8.85,9.15,10.20, 9.15,7.95,8.85,9.00,7.80,10.05,
10.50,9.15,9.45,9.45,9.45,8.10,8.85,9.60,6.45,9.75,10.20,12.00, 6.00,8.85,
9.00,9.75,10.65,13.20,7.95,12.50,7.95,9.15,9.75,9.00)
Banco2 <- tibble(
Idade = idade,
Comprimento = comprimento
)
idade<-c(40, 42, 42, 47, 49, 50, 54, 56, 56, 57, 57, 58, 61, 62, 62, 65, 65, 65, 66,
66, 66, 67, 68, 68, 68, 69, 69, 70, 71, 71, 71, 72, 73, 74, 74, 75, 75, 75,
75, 76, 77, 80, 82, 82, 82, 83, 85, 86, 88, 88, 94)
comprimento<-c(9.00,9.60,9.75,11.25,9.45,11.25,9.00,7.95,12.00,8.10,10.20,8.55,7.20,
7.95,8.85,8.25,8.85,9.75,8.85,9.15,10.20, 9.15,7.95,8.85,9.00,7.80,10.05,
10.50,9.15,9.45,9.45,9.45,8.10,8.85,9.60,6.45,9.75,10.20,12.00, 6.00,8.85,
9.00,9.75,10.65,13.20,7.95,12.50,7.95,9.15,9.75,9.00)
Banco2 <- tibble(
Idade = idade,
Comprimento = comprimento
)
salario<-c(19307,31769,22769,31307,27769,30923,26538,22230,28538,32307,28230,19076,
25384,25692,42230,40923,36000,47076,31461,29923,47461,41153,23615,40923,
45076,29076,44846)
experiencia<-c(0, 17, 8, 15, 9, 15, 8, 5, 13, 20, 11, 1, 6, 7, 23, 20, 18, 27,
11, 10, 29, 23, 4, 22, 25, 9, 25)
Banco3 <- tibble(
Salario = salario,
Experiencia = experiencia
)
Banco3
Banco3 |> head() |> kable()
Banco1 |> head() |> kable()
Banco2 |> head() |> kable()
?lm
regre_massa <- lm(`Massa Muscular` ~ Idade, Banco1)
regre_massa
regre_massa
regre_massa
regre_massa
abline(regre_massa)
plot(Banco1$Idade, Banco1$`Massa Muscular`)
abline(Banco1$Idade)
abline(regre_massa)
plot(x = Banco1$Idade, y = Banco1$`Massa Muscular`)
abline(regre_massa)
plot(x = Banco1$Idade, y = Banco1$`Massa Muscular`)
abline(regre_massa)
plot(x = Banco1$Idade, y = Banco1$`Massa Muscular`)
abline(regre_massa)
idade_morte <- lm(Idade ~ Comprimento, Banco2)
idade_morte
plot(x = Banco2$Idade, y = Banco2$Comprimento)
abline(regre_massa)
abline(idade_morte)
plot(x = Banco2$Idade, y = Banco2$Comprimento)
abline(idade_morte)
regre_salario <- lm(Salario ~ Experiencia, Banco3)
regre_salario
summary(regre_massa)
plot(x = Banco3$Salario, y = Banco3$Experiencia)
plot(x = Banco3$Salario, y = Banco3$Experiencia)
abline(idade_morte)
plot(x = Banco3$Salario, y = Banco3$Experiencia)
abline(regre_salario)
summary(regre_salario)
summary(regre_salario)$sigma
sqrt(summary(regre_salario)$sigma)
summary(regre_salario)$sigma
summary(regre_salario)
summary(regre_massa)$sigma
plot(x = Banco1$Idade, y = Banco1$`Massa Muscular`)
abline(regre_massa)
abline(regre_salario)
abline(regre_salario)
plot(x = Banco3$Salario, y = Banco3$Experiencia)
abline(regre_salario)
idade <- c(71, 64, 43, 67, 56, 73, 68, 56, 76, 65, 45, 58, 45, 53, 49, 78, 73, 68)
massamuscular <- c(82, 91, 100, 68, 87, 73, 78, 80, 65, 84, 116, 76, 97, 100, 105, 77, 73, 78)
Banco1 <- tibble(
Idade = idade,
`Massa Muscular` = massamuscular
)
Banco1 |> head() |> kable()
Banco1 |>
ggplot() +
geom_point(aes(x = Idade, y = `Massa Muscular`))
cor(Banco1$Idade, Banco1$`Massa Muscular`)
cor.test(Banco1$Idade, Banco1$`Massa Muscular`, method = "pearson", alternative="two.sided")
cor.test(Banco1$Idade, Banco1$`Massa Muscular`, method = "pearson", alternative="less")
cor.test(Banco1$Idade, Banco1$`Massa Muscular`, method = "pearson", alternative="great")
cor.test(Banco1$Idade, Banco1$`Massa Muscular`, method = "pearson", alternative="two.sided")
idade <- c(40, 42, 42, 47, 49, 50, 54, 56, 56, 57, 57, 58, 61, 62, 62, 65, 65, 65, 66,
66, 66, 67, 68, 68, 68, 69, 69, 70, 71, 71, 71, 72, 73, 74, 74, 75, 75, 75,
75, 76, 77, 80, 82, 82, 82, 83, 85, 86, 88, 88, 94)
comprimento <- c(9.00,9.60,9.75,11.25,9.45,11.25,9.00,7.95,12.00,8.10,10.20,8.55,7.20,
7.95,8.85,8.25,8.85,9.75,8.85,9.15,10.20, 9.15,7.95,8.85,9.00,7.80,10.05,
10.50,9.15,9.45,9.45,9.45,8.10,8.85,9.60,6.45,9.75,10.20,12.00, 6.00,8.85,
9.00,9.75,10.65,13.20,7.95,12.50,7.95,9.15,9.75,9.00)
Banco2 |> head() |> kable()
Banco2 |>
ggplot() +
geom_point(aes(x = Idade, y = Comprimento))
cor(Banco2$Idade, Banco2$Comprimento)
cor.test(Banco2$Idade, Banco2$Comprimento, method = "pearson", alternative="two.sided")
salario <- c(19307,31769,22769,31307,27769,30923,26538,22230,28538,32307,28230,19076,
25384,25692,42230,40923,36000,47076,31461,29923,47461,41153,23615,40923,
45076,29076,44846)
experiencia <- c(0, 17, 8, 15, 9, 15, 8, 5, 13, 20, 11, 1, 6, 7, 23, 20, 18, 27,
11, 10, 29, 23, 4, 22, 25, 9, 25)
Banco3 <- tibble(
Salario = salario,
Experiencia = experiencia
)
Banco3 |> head() |> kable()
Banco3 |>
ggplot() +
geom_point(aes(x = Salario, y = Experiencia))
cor(Banco3$Salario, Banco3$Experiencia)
cor.test(Banco3$Salario, Banco3$Experiencia, method = "pearson", alternative="two.sided")
tinytex::install_tinytex()
,
,
idade <- c(71, 64, 43, 67, 56, 73, 68, 56, 76, 65, 45, 58, 45, 53, 49, 78, 73, 68)
massamuscular <- c(82, 91, 100, 68, 87, 73, 78, 80, 65, 84, 116, 76, 97, 100, 105, 77, 73, 78)
Banco1 <- tibble(
Idade = idade,
`Massa Muscular` = massamuscular
)
Banco1 |> head() |> kable()
regre_massa <- lm(`Massa Muscular` ~ Idade, Banco1)
regre_massa
plot(x = Banco1$Idade, y = Banco1$`Massa Muscular`)
abline(regre_massa)
plot(x = Banco2$Idade, y = Banco2$Comprimento)
abline(idade_morte)
plot(x = Banco1$Idade, y = Banco1$`Massa Muscular`)
abline(regre_massa)
summary(regre_massa)$sigma
salario<-c(19307,31769,22769,31307,27769,30923,26538,22230,28538,32307,28230,19076,
25384,25692,42230,40923,36000,47076,31461,29923,47461,41153,23615,40923,
45076,29076,44846)
experiencia<-c(0, 17, 8, 15, 9, 15, 8, 5, 13, 20, 11, 1, 6, 7, 23, 20, 18, 27,
11, 10, 29, 23, 4, 22, 25, 9, 25)
Banco3 <- tibble(
Salario = salario,
Experiencia = experiencia
)
Banco3 |> head() |> kable()
regre_salario <- lm(Salario ~ Experiencia, Banco3)
regre_salario
plot(x = Banco3$Salario, y = Banco3$Experiencia)
abline(regre_salario)
plot(y = Banco3$Salario, x = Banco3$Experiencia)
plot(y = Banco3$Salario, x = Banco3$Experiencia)
abline(regre_salario)
plot(x = Banco2$Comprimento, y = Banco2$Idade)
abline(idade_morte)
Banco2 |> head() |> kable()
idade_morte <- lm(Idade ~ Comprimento, Banco2)
idade_morte
plot(x = Banco2$Comprimento, y = Banco2$Idade)
abline(idade_morte)
predict(regre_massa)
predict(regre_massa)
predict(idade_morte)
predict(regre_salario)
library(tidygeocoder)
library(readr)
getwd()
dados <- read_csv("Documents/modelagem_imoveis/dados/dados_sao_jose_ribamar.csv")
dados |> duplicated()
dados |> duplicated(keep_all = TRUE)
subset(dados, !duplicated(dados))
dados <- read_csv("Documents/modelagem_imoveis/dados/dados_sjr.csv")
dados |> View()
dados_novos <- dados |> geocode(address = endereco, lat = "longitude", long = "longitude")
dados_novos <- dados |> geocode(address = endereco, lat = "latitude", long = "longitude")
dados_novos <- dados |> geocode(address = endereco, lat = "latitude", long = "longitude", method = "arcgis")
dados_novos
dados_novos |> View()
dados <- read_csv("Documents/modelagem_imoveis/dados/dados_sjr.csv")
dados |> duplicated(keep_all = TRUE)
subset(dados, !duplicated(dados))
dados_novos <- dados |> geocode(address = endereco, lat = "latitude", long = "longitude", method = "arcgis")
?write.csv
dados <- read_csv("Documents/modelagem_imoveis/dados/dados_sjr.csv")
dados |> duplicated(keep_all = TRUE)
subset(dados, !duplicated(dados))
dados_novos <- dados |> geocode(address = endereco, lat = "latitude", long = "longitude", method = "arcgis")
library(tidygeocoder)
library(readr)
dados <- read_csv("Documents/modelagem_imoveis/dados/dados_sjr.csv")
dados |> duplicated(keep_all = TRUE)
subset(dados, !duplicated(dados))
dados_novos <- dados |> geocode(address = endereco, lat = "latitude", long = "longitude", method = "arcgis")
dados_novos |> write.csv("Documents/modelagem_imoveis/dados/dados_sjr.csv", row.names = FALSE)
library(tidygeocoder)
library(readr)
dados = read_csv('/home/cownvin/Documents/scrapy_zap/sjr.csv')
dados |> View()
dados_novos = dados |> geocode(address = endereco, lat = "latitude", long = "longitude")
dados_novos |> View()
dados_novos = dados |> geocode(address = endereco, lat = "latitude", long = "longitude", method = "arcgis")
dados_novos |> View()
dados_novos |> write.csv('/home/cownvin/Documents/scrapy_zap/sjr.csv', row.names = FALSE)
setwd("Documents/model_mercado_financeiro/")
library(tidyverse)
library(modeltime)
library(timetk)
library(tidymodels)
library(dplyr)
library(readxl)
dados <- read_xlsx("WDOLFUT-DIARIO-02_01_2018_a_03-05-2023.xlsx")
df <- dados |>
arrange(Data) |>
future_frame(.date_var = Data, .length_out = 0, .bind_data = TRUE)
df |> plot_time_series(Data, Minima)
splits <- time_series_split(
data = df,
date_var = Data,
assess = "1.9 year",
cumulative = TRUE
)
splits |>
tk_time_series_cv_plan() |>
plot_time_series_cv_plan(Data, Minima)
# Teste e treinamento
treino <- training(splits)
teste <- testing(splits)
## Arima
model_arima <- arima_reg() |>
set_engine("auto_arima") |>
fit(Minima ~ ., treino)
## Prophet
model_prophet <- prophet_reg(
seasonality_yearly = TRUE
) |>
set_engine("prophet") |>
fit(Minima ~ ., treino)
## GLM
model_glmnet <- linear_reg(penalty = 0.01) |>
set_engine("glmnet") |>
fit(
Minima ~ wday(Data, label = TRUE)
+ month(Data, label = TRUE)
+ as.numeric(Data)
+ Abertura
+ Maxima
+ Fechamento,
treino
)
model_tbl <- modeltime_table(
model_arima,
model_prophet,
model_glmnet
)
calib_tbl <- model_tbl |>
modeltime_calibrate(teste)
calib_tbl |> modeltime_accuracy()
calib_tbl |>
modeltime_forecast(
new_data = teste,
actual_data = df
) |>
plot_modeltime_forecast()
future_forecast_tbl <- calib_tbl |>
modeltime_refit(df) |>
modeltime_forecast(
h = "1.9 year",
new_data = df,
actual_data = df
)
library(tidyverse)
library(modeltime)
library(timetk)
library(tidymodels)
library(dplyr)
library(readxl)
dados <- read_xlsx("WDOLFUT-DIARIO-02_01_2018_a_03-05-2023.xlsx")
df <- dados |>
arrange(Data) |>
future_frame(.date_var = Data, .length_out = 0, .bind_data = TRUE)
df |> plot_time_series(Data, Minima)
splits <- time_series_split(
data = df,
date_var = Data,
assess = "1.9 year",
cumulative = TRUE
)
splits |>
tk_time_series_cv_plan() |>
plot_time_series_cv_plan(Data, Minima)
# Teste e treinamento
treino <- training(splits)
teste <- testing(splits)
## Arima
model_arima <- arima_reg() |>
set_engine("auto_arima") |>
fit(Minima ~ Data, treino)
## Prophet
model_prophet <- prophet_reg(
seasonality_yearly = TRUE
) |>
set_engine("prophet") |>
fit(Minima ~ Data, treino)
## GLM
model_glmnet <- linear_reg(penalty = 0.01) |>
set_engine("glmnet") |>
fit(
Minima ~ wday(Data, label = TRUE)
+ month(Data, label = TRUE)
+ as.numeric(Data)
+ Abertura
+ Maxima
+ Fechamento,
treino
)
model_tbl <- modeltime_table(
model_arima,
model_prophet,
model_glmnet
)
calib_tbl <- model_tbl |>
modeltime_calibrate(teste)
calib_tbl |> modeltime_accuracy()
calib_tbl |>
modeltime_forecast(
new_data = teste,
actual_data = df
) |>
plot_modeltime_forecast()
future_forecast_tbl <- calib_tbl |>
modeltime_refit(df) |>
modeltime_forecast(
h = "1.9 year",
new_data = df,
actual_data = df
)
future_forecast_tbl |>
plot_modeltime_forecast()
library(tidyverse)
library(modeltime)
library(timetk)
library(tidymodels)
library(dplyr)
library(readxl)
dados <- read_xlsx("WDOLFUT-DIARIO-02_01_2018_a_03-05-2023.xlsx")
df <- dados |>
arrange(Data) |>
future_frame(.date_var = Data, .length_out = 0, .bind_data = TRUE)
df |> plot_time_series(Data, Minima)
splits <- time_series_split(
data = df,
date_var = Data,
assess = "1.9 year",
cumulative = TRUE
)
splits |>
tk_time_series_cv_plan() |>
plot_time_series_cv_plan(Data, Minima)
# Teste e treinamento
treino <- training(splits)
teste <- testing(splits)
## Arima
model_arima <- arima_reg() |>
set_engine("auto_arima") |>
fit(Minima ~ Data, treino)
## Prophet
model_prophet <- prophet_reg(
seasonality_yearly = TRUE,
daily.seasonality=TRUE
) |>
set_engine("prophet") |>
fit(Minima ~ Data, treino)
library(tidyverse)
library(modeltime)
library(timetk)
library(tidymodels)
library(dplyr)
library(readxl)
dados <- read_xlsx("WDOLFUT-DIARIO-02_01_2018_a_03-05-2023.xlsx")
df <- dados |>
arrange(Data) |>
future_frame(.date_var = Data, .length_out = 0, .bind_data = TRUE)
df |> plot_time_series(Data, Minima)
splits <- time_series_split(
data = df,
date_var = Data,
assess = "1.9 year",
cumulative = TRUE
)
splits |>
tk_time_series_cv_plan() |>
plot_time_series_cv_plan(Data, Minima)
# Teste e treinamento
treino <- training(splits)
teste <- testing(splits)
## Arima
model_arima <- arima_reg() |>
set_engine("auto_arima") |>
fit(Minima ~ Data, treino)
## Prophet
model_prophet <- prophet_reg(
seasonality_yearly = TRUE
) |>
set_engine("prophet",
daily.seasonality=TRUE) |>
fit(Minima ~ Data, treino)
## GLM
model_glmnet <- linear_reg(penalty = 0.01) |>
set_engine("glmnet") |>
fit(
Minima ~ wday(Data, label = TRUE)
+ month(Data, label = TRUE)
+ as.numeric(Data)
+ Abertura
+ Maxima
+ Fechamento,
treino
)
model_tbl <- modeltime_table(
model_arima,
model_prophet,
model_glmnet
)
calib_tbl <- model_tbl |>
modeltime_calibrate(teste)
calib_tbl |> modeltime_accuracy()
calib_tbl |>
modeltime_forecast(
new_data = teste,
actual_data = df
) |>
plot_modeltime_forecast()
future_forecast_tbl <- calib_tbl |>
modeltime_refit(df) |>
modeltime_forecast(
h = "1.9 year",
new_data = df,
actual_data = df
)
future_forecast_tbl |>
plot_modeltime_forecast()
model_tbl
model_tbl$.model
model_tbl$.model_desc
model_tbl
calib_tbl
calib_tbl$.calibration_data
calib_tbl$.type
model_tbl
calib_tbl
calib_tbl$.model_desc
```
calib_tbl <- model_tbl |>
modeltime_calibrate(new_data = teste)
calib_tbl
calib_tbl |> modeltime_accuracy(metric_set = metric_set(mae, rmse, rsq()))
calib_tbl |> modeltime_accuracy(metric_set = metric_set(mae, rmse, rsq))
